version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_service
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: auth_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_HOST: '%'  # Allow external connections
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

  node:
    build:
      context: ./auth-service  # Path to your Node.js app folder
    container_name: node_service
    depends_on:
      - mysql  # Ensure MySQL service is ready before starting Node.js
      - rabbitmq
    environment:
      MYSQL_HOST: mysql_service  # Use MySQL container's service name
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: auth_db
      MYSQL_ROOT_HOST: '%'  # Allow external connections
      JWT_SECRET: 1I6LS3DOAjAjQRr4LL5ZxsTAgLG5B2EeABwbJDoZHRC0alE5u9WLrgB9jr5YPm4R
    ports:
      - "3000:3000"  # Adjust port based on your app's configuration
    networks:
      - app_network

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin_service
    restart: always
    environment:
      PMA_HOST: mysql_service
      PMA_USER: user
      PMA_PASSWORD: password
    ports:
      - "8080:80"
    networks:
      - app_network

  postgres:
    image: postgres:14
    container_name: postgres_service
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products_db
      POSTGRES_HOST_AUTH_METHOD: trust  # Allows external connections
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_service
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - app_network

  mongo:
    image: mongo:6.0
    container_name: mongo_service
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express_service
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo_service
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - app_network

  python:
    build:
      context: ./order-service  # Path to your Node.js app folder
    container_name: order_service
    environment:
      MONGO_URI: mongodb://mongo_service:27017
      MONGO_DB: order_db
      JWT_SECRET: 1I6LS3DOAjAjQRr4LL5ZxsTAgLG5B2EeABwbJDoZHRC0alE5u9WLrgB9jr5YPm4R
      RABBITMQ_HOST: rabbitmq_service
    depends_on:
      - mongo  # Ensure MySQL service is ready before starting Node.js
      - rabbitmq
    ports:
      - "5000:5000"  # Adjust port based on your app's configuration
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_service
    restart: always
    ports:
      - "5672:5672" # RabbitMQ main port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - app_network

  strapi:
    build:
      context: ./product-service  # Path to your Node.js app folder
    container_name: product_service
    environment:
      HOST: 0.0.0.0
      PORT: 1337
      APP_KEYS: S0RbTh6zL2w21+G5YIHrJA==,z5+mJkHYyilff9seoWHynA==,92rYxcuV81saUUino1MGbQ==,7vDoH5GQ4Wc1LwzYgExykA==
      API_TOKEN_SALT: tw39c6ho8dSDU/3CspUHxg==
      ADMIN_JWT_SECRET: 5dVCdPbU2vnSkCY3hsDL7Q==
      TRANSFER_TOKEN_SALT: 5R0CPjhV6UO0x3qgnYKf9w==
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres_service
      DATABASE_PORT: 5432
      DATABASE_NAME: products_db
      DATABASE_USERNAME: user
      DATABASE_PASSWORD: password
      DATABASE_SSL: false
      DATABASE_FILENAME: 
    depends_on:
      - postgres  # Ensure MySQL service is ready before starting Node.js
      - rabbitmq
    ports:
      - "1337:1337"  # Adjust port based on your app's configuration
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend 
    container_name: frontend
    environment:
      API_BASE_AUTH: http://localhost:3000/api/auth
      API_BASE_ORDERS: http://localhost:5000/api/orders
      API_BASE_PRODUCTS: http://localhost:1337/api/products?populate=*
    depends_on:
      - strapi 
      - python
      - node
    ports:
      - "9000:9000" 
    networks:
      - app_network

volumes:
  mysql_data:
  postgres_data:
  mongo_data:
